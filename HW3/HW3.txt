/**
 * @file 
 *		kthread_create.c
 * @brief 
 *		This file implements the profiling for kthread_create
 *
 * @author 
 *		Saritha Senguttuvan
 * @date 
 *		Oct,2017
 *
 */
#include <linux/module.h>   
#include <linux/kernel.h>   
#include <linux/init.h>
#include <linux/kthread.h>  
#include <linux/timex.h> 

MODULE_LICENSE("GPL");
MODULE_DESCRIPTION("kThread_Create momdule");
MODULE_AUTHOR("Saritha Senguttuvan");

void ktimer_CB_func(unsigned long data);        /* function prototype for call bcak function for timer */
static struct task_struct *tid_1;
 
int dummy_fn(void* arg)
{
    //printk("Do nothing in the child function \n");
    return 0;    
} 
#if 0 
static int kthread_mod_init(void)                      /* function to initialize the kernel module */
{  
    unsigned long jiffies_before;
    unsigned long jiffies_after;
    unsigned int a;
    unsigned int b;
    char  my_kernelThread[8] = "tid_1";
    printk("Current process id is %d\n", current->pid); 
    printk(KERN_INFO "Loading Kernel \n");
    jiffies_before = (unsigned long)get_jiffies_64();       /* Getting CPU time in terms of jiffies */
    tid_1 = kthread_create(&dummy_fn,NULL,my_kernelThread); /* Kthread Create call*/
    jiffies_after = (unsigned long)get_jiffies_64();       /* Getting CPU time in terms of jiffies */ 
    printk("The jiffies_before = %ld\n", jiffies_before);
    printk("The jiffies_after = %ld\n", jiffies_after);  
    a = jiffies_to_msecs(jiffies_before);
    b = jiffies_to_msecs(jiffies_after);
    printk("The new jiffies value is %u \n", a);
    printk("The new jiffies value is %u \n", b);
    return 0;
}
#endif
static int kthread_mod_init(void)                      /* function to initialize the kernel module */
{  
    cycles_t cycles_before;
    cycles_t cycles_after;
    char  my_kernelThread[8] = "tid_1";
    cycles_before = get_cycles();
    tid_1 = kthread_create(&dummy_fn,NULL,my_kernelThread); /* Kthread Create call*/
    cycles_after = get_cycles();
    printk("The cycles before is %llu \n",cycles_before); 
    printk("The cycles after is %llu \n",cycles_after); 
    printk("The number of CPU cycles for Kthread_create is %llu \n", (cycles_after - cycles_before)); 
    return 0;
}
static void kthread_mod_exit(void)             /* function to exit the kernel module */ 
{
    printk(KERN_INFO "unloading kernel\n"); 
    if(tid_1)
        kthread_stop(tid_1);     
}

module_init(kthread_mod_init);      /* kmod_init is registered as the entry point for the kernel module */   
module_exit(kthread_mod_exit);      /* kmod_exit is registered as the exit point for the kernel module */ 
/**
 * @file 
 *		profile.c
 * @brief 
 *		This file implements the profiling for pthread create, fork and exec functionalities
 *
 * @author 
 *		Saritha Senguttuvan
 * @date 
 *		Oct,2017
 *
 */
#define _GNU_SOURCE
#include <stdio.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/resource.h>
#include <sys/wait.h>
#include <pthread.h>
#include <stdlib.h>

#define FORK_EXEC	 1
#define PTHREAD_CREATE    0
#define KTHREAD_CREATE    0

/* Thread start routine */
void *dummy_fn(void *threadid)
{
    printf("Do Nothing in thread function\n");
    pthread_exit(NULL);
}

void main()
{
	struct rusage usage_before;
	struct rusage usage_after;
	size_t user_time;
	size_t kern_time;
	pid_t pid;
	pthread_t tid_1;
    pthread_attr_t t1_attr;
    size_t rc;
 
 /********************** Pthread Create **************************************************/ 
  
    pthread_attr_init(&t1_attr);            /* initializes the pthread attribute values */
    getrusage(RUSAGE_THREAD, &usage_before);  /* Gets the resource usage in user and kernel space before pthread_create */
    rc = pthread_create(&tid_1, &t1_attr, dummy_fn, NULL);  /* Call to create a new thread */
    getrusage(RUSAGE_THREAD, &usage_after);   /* Gets the resource usage in user and kernel space after pthread_create */
    if (rc) 
    {
        printf("ERROR; pthread_create() rc is %ld\n", rc); 
        perror(NULL); exit(-1);
    }
    printf("Thread 1 spawned\n");	    
    printf("pthread_create : user cpu time before pthread_create : %ld us\n", usage_before.ru_utime.tv_sec*1000000 + usage_before.ru_utime.tv_usec);
    printf("pthread_create : kern cpu time before pthread_create : %ld us\n", usage_before.ru_stime.tv_sec*1000000 + usage_before.ru_stime.tv_usec);

    printf("pthread_create : user cpu time after pthread_create : %ld us\n", usage_after.ru_utime.tv_sec*1000000 + usage_after.ru_utime.tv_usec);
    printf("pthread_create : kern cpu time after pthread_create : %ld us\n", usage_after.ru_stime.tv_sec*1000000 + usage_after.ru_stime.tv_usec);
    user_time = (usage_after.ru_utime.tv_sec*1000000 + usage_after.ru_utime.tv_usec) - (usage_before.ru_utime.tv_sec*1000000 + usage_before.ru_utime.tv_usec); /* Total CPU time in user space */
    kern_time = (usage_after.ru_stime.tv_sec*1000000 + usage_after.ru_stime.tv_usec)-(usage_before.ru_stime.tv_sec*1000000 + usage_before.ru_stime.tv_usec);   /* Total CPU time in kernel space */
    printf("pthread_create : Total user time for fork : %ld us\n", user_time);
    printf("pthread_create : Total kern time for fork : %ld us\n", kern_time);  
    if(pthread_join(tid_1, NULL) == 0)  /* Waits for child thread to complete its execution */
       printf("Thread 1 done\n");
    else
       perror("Thread 1");  


/********************** fork() and exec() **************************************************/         
    getrusage(RUSAGE_SELF, &usage_before);      /* Gets the resource usage in user and kernel space before fork */
	pid = fork();   
    if(pid)
	{
	   //printf("******* In Parent Process *******\n");
	   int status = 0;
	   //printf("Fork returned value is %d\n", pid);
	   if(waitpid(pid, &status, 0) == -1)          /* waits for chils process to complete its execution */
			perror("wait error");
	   getrusage(RUSAGE_SELF, &usage_after);    /* Gets the resource usage in user and kernel space after fork */
       printf("PARENT : user cpu time before fork : %ld us\n", usage_before.ru_utime.tv_sec*1000000 + usage_before.ru_utime.tv_usec);
       printf("PARENT : kern cpu time before fork : %ld us\n", usage_before.ru_stime.tv_sec*1000000 + usage_before.ru_stime.tv_usec);
       printf("PARENT : user cpu time after exec : %ld us\n", usage_after.ru_utime.tv_sec*1000000 + usage_after.ru_utime.tv_usec);
       printf("CHILD : kern cpu time after exec: %ld us\n", usage_after.ru_stime.tv_sec*1000000 + usage_after.ru_stime.tv_usec);
       user_time = (usage_after.ru_utime.tv_sec*1000000 + usage_after.ru_utime.tv_usec) - (usage_before.ru_utime.tv_sec*1000000 + usage_before.ru_utime.tv_usec); /* Total CPU time in user space */
       kern_time = (usage_after.ru_stime.tv_sec*1000000 + usage_after.ru_stime.tv_usec) - (usage_before.ru_stime.tv_sec*1000000 + usage_before.ru_stime.tv_usec); /* Total CPU time in kernel space */
       printf("PARENT : Total user time for fork and exec : %ld us\n", user_time);
       printf("PARENT : Total kern time for fork and exec  %ld us\n", kern_time);
	}
	else if(pid == 0)
	{ 
		printf("******* In Child Process *******\n");
		static char *argv[]={"test", "0", NULL};
		//static char *argv[]={NULL};
		execv("exit", argv);            /* Exiting exit(0) */
		exit(1);
	}
	else 
	    perror("forking error");	
	    while(1);
	return;


}
/**
 * @file 
 *		profile.c
 * @brief 
 *		This file implements the profiling for pthread create, fork and exec functionalities
 *
 * @author 
 *		Saritha Senguttuvan
 * @date 
 *		Oct,2017
 *
 */
#define _GNU_SOURCE
#include <stdio.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>
#include <pthread.h>
#include <stdint.h>
#include <stdlib.h>




/* Thread start routine */
void *dummy_fn(void *threadid)
{
    printf("Do Nothing in thread function\n");
    pthread_exit(NULL);
}

void main()
{
    uint64_t total_time = 0;
	struct timespec usage_before;
    struct timespec usage_after;
	pid_t pid;
	pthread_t tid_1;
    pthread_attr_t t1_attr;
    size_t rc;
 
 /********************** Pthread Create **************************************************/ 
  
    pthread_attr_init(&t1_attr);            /* initializes the pthread attribute values */
    if(clock_gettime(CLOCK_THREAD_CPUTIME_ID,&usage_before))           /* Get the current time */
        printf("ERROR:clock_gettime before pthread_create \n");
    rc = pthread_create(&tid_1, &t1_attr, dummy_fn, NULL);  /* Call to create a new thread */
    if(clock_gettime(CLOCK_THREAD_CPUTIME_ID,&usage_after))           /* Get the current time */
        printf("ERROR:clock_gettime before pthread_create \n");
    if (rc) 
    {
        printf("ERROR; pthread_create() rc is %ld\n", rc); 
        perror(NULL); exit(-1);
    }
    printf("Thread 1 spawned\n");	    
    printf("pthread_create : time before pthread_create : %ld ns\n", usage_before.tv_sec*1000000000 + usage_before.tv_nsec);
    printf("pthread_create : time after pthread_create : %ld ns\n", usage_after.tv_sec*1000000000 + usage_after.tv_nsec);
    total_time = (usage_after.tv_sec*1000000000 + usage_after.tv_nsec) - (usage_before.tv_sec*1000000000 + usage_before.tv_nsec); /* Total time in for pthread_create */
    printf("pthread_create : Total  time for pthread_create : %ld ns\n", total_time);
    if(pthread_join(tid_1, NULL) == 0)  /* Waits for child thread to complete its execution */
       printf("Thread 1 done\n");
    else
       perror("Thread 1");  


/********************** fork() and exec() **************************************************/         
    if(clock_gettime(CLOCK_THREAD_CPUTIME_ID,&usage_before))           /* Get the current time */
        printf("ERROR:clock_gettime before fork \n");
	pid = fork();   
    if(pid)
	{
	   //printf("******* In Parent Process *******\n");
	   int status = 0;
	   //printf("Fork returned value is %d\n", pid);
	   if(waitpid(pid, &status, 0) == -1)          /* waits for chils process to complete its execution */
			perror("wait error");
	   if(clock_gettime(CLOCK_THREAD_CPUTIME_ID,&usage_after))           /* Get the current time */
                printf("ERROR:clock_gettime after exec \n");
        printf("fork and exec : time before fork : %ld ns\n", usage_before.tv_sec*1000000000 + usage_before.tv_nsec);
        printf("fork and exec : time after exec : %ld ns\n", usage_after.tv_sec*1000000000 + usage_after.tv_nsec);
        total_time = (usage_after.tv_sec*1000000000 + usage_after.tv_nsec) - (usage_before.tv_sec*1000000000 + usage_before.tv_nsec); /* Total time in for pthread_create */
        printf("fork and exec : Total  time for fork and exec : %ld ns\n", total_time);
	}
	else if(pid == 0)
	{ 
		printf("******* In Child Process *******\n");
		static char *argv[]={"test", "0", NULL};
		//static char *argv[]={NULL};
		execv("exit", argv);            /* Exiting exit(0) */
		exit(1);
	}
	else 
	    perror("forking error");	
	return;


}
/**
 * @file 
 *		thread.c
 * @brief 
 *		This file implements the different Pthread functionalities 
 *
 * @author 
 *		Saritha Senguttuvan
 * @date 
 *		Oct,2017
 *
 */

#define _GNU_SOURCE
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

/* Thread names */
pthread_t tid_1;
pthread_t tid_2;

/* Mutex resource */
pthread_mutex_t rsrcA;

/* condition variable */
pthread_cond_t condA;

/* Pthread attributes */
pthread_attr_t main_attr;
pthread_attr_t t1_attr;
pthread_attr_t t2_attr;

int max_prio, min_prio;

struct sched_param main_param;
struct sched_param t1_param;
struct sched_param t2_param;
pid_t mainpid;

size_t sum = 0;

/* Thread 1 start function */
void *dummy_fn(void *threadid)
{
   int rc = 0;
   size_t i = 0;
   size_t num = (size_t)threadid;
   size_t stack_size, guard_size;

   void *stack_addr;
   printf("In the thread 1 function\n");
   printf("Thread 1 trying to grab resource\n");
   rc = pthread_mutex_lock(&rsrcA);	                    /* Thread 1 trying to acquire the mutex lock */
   if(rc)
        printf("thread1: pthread_mutex_lock error\n");   
   printf("Thread 1 got the resource\n");
   printf("The thread id from the thread 1 function is %ld\n", pthread_self());         /* Returns the ID of the calling thread */ 

   rc = pthread_getattr_default_np(&t1_attr);                   /* Gets the default attribute values of the thread */
   if(rc != 0)
        printf("ERROR; pthread_getattr_default_np() rc is %d\n", rc);  
      
   rc = pthread_attr_getguardsize(&t1_attr, &guard_size);       /* Gets the guard size for the current thread */
   if (rc  != 0)
        printf("ERROR: pthread_attr_getguardsize() rc is %d\n", rc); 
   printf("The default guard size of thread 1 is %ld bytes\n", guard_size);     

   rc = pthread_attr_getstack(&t1_attr, &stack_addr, &stack_size);      /* Gets the stack address and stack value for the current thread */
   if (rc != 0)
        printf("ERROR; pthread_attr_getstack() rc is %d\n", rc); 
   if (stack_size > 0)
        printf("The default stack size is %ld bytes\n", stack_size);       
   rc = pthread_getattr_np(tid_1,&t1_attr);                     /* Get the attributes of the current thread */
   if(rc != 0)
        printf("ERROR; getattr_np() rc is %d\n", rc);  
      
   rc = pthread_attr_getguardsize(&t1_attr, &guard_size);       
   if (rc  != 0)
        printf("ERROR: pthread_attr_getguardsize() rc is %d\n", rc); 
    printf("The new guard size of thread 1 is %ld bytes\n", guard_size);     

    rc = pthread_attr_getstack(&t1_attr, &stack_addr, &stack_size);
    if (rc != 0)
        printf("ERROR; pthread_attr_getstack() rc is %d\n", rc); 
    if (stack_size > 0)
        printf("The new stack size is %ld bytes\n", stack_size);
   
   usleep(1000000);
   
   /*   
   for(i=1; i<=(num); i++)
       sum = sum + i;
   printf("The sum value in the thread 1 function is %ld\n", sum);
   rc = pthread_mutex_unlock(&rsrcA); 
   if(rc)
        printf("Thread1 pthread_mutex_unlock error\n");    
   printf("Thread 1 released the resource\n");
   */
           
   for(i=1; i<=(num); i++)
       sum = sum + i;                                   /* Computes the sum value */
   rc = pthread_cond_signal(&condA);                    /* Thread 1 sends the condition signal */
   if (rc) 
   {
       printf("ERROR; pthread_cond_signal() rc is %d\n", rc); 
       perror(NULL); 
       exit(-1);
   }   
   printf("The condition from thread 1 has reached\n"); 
   rc = pthread_mutex_unlock(&rsrcA);                   /* Releases the mutex lock */
   if(rc)
        printf("Thread1 pthread_mutex_unlock error\n");  
   printf("Thread 1 released the resource\n");
   pthread_exit(NULL);   
}

/* Threead 2 function */
void *dummy2_fn(void *threadid)
{
   size_t rc = 0;
   printf("Thread 2 trying to grab the resource\n");
   size_t i = 0;
   rc = pthread_mutex_lock(&rsrcA);                     /* Thread 2 trying to acquire the mutex lock */
   if(rc)
        printf("Thread2: pthread_mutex_lock error %ld\n",rc);	
   printf("Thread 2 got the resource\n");    
   /*
   //rc = pthread_mutex_trylock(&rsrcA);                /* Thread 2 trying to acquire the mutex lock using trylock */
   if(rc)
        printf("Thread2: pthread_mutex_trylock error %ld\n",rc);	
   printf("Thread 2 got the resource\n"); 
   size_t num = (size_t)threadid;
   printf("In the thread 2 function\n"); 
   printf("The thread id from the thread 2 function is %ld\n", pthread_self());
   
  /*  
   for(i=1; i<=(num); i++)
       sum = sum + i;
   printf("The sum value in the thread 2 function is %ld\n", sum); 
   */
   
   while(sum==0)
   {
        printf("The condition sum value is %ld. Using condition wait, control to thread 1 given\n", sum);
        rc = pthread_cond_wait(&condA, &rsrcA);                      /* Pthread waits for a condition, and releases the mutex until condition ha met */
        if(rc)
            printf("Thread2 pthread_cond_wait error\n");
   }
   printf("The sum value is %ld\n",sum);                             /* Displays the sum value */  
   rc = pthread_mutex_unlock(&rsrcA);                                /* Releases the mutex lock */
   if(rc)
        printf("Thread2 pthread_mutex_unlock error\n"); 
   printf("Thread 2 released the resource\n"); 
   pthread_exit(NULL);
}


int main ()
{
   size_t rc;
   size_t guard_size; 
   size_t input_var = 5;  
   size_t new_guard_size = 8192;   
   rc = pthread_mutex_init(&rsrcA, NULL);        /* Set default protocol for mutex */
   if(rc)
      printf("Mutex init error\n");
   rc = pthread_cond_init(&condA, NULL);           /* initializing the mutex condition variable */
   if(rc)
      printf("condition init error\n");
   pthread_attr_init(&t1_attr);                     /* initialzing thread1 attributes */
   pthread_attr_init(&t2_attr);                      /* initialzing thread2 attributes */
   printf("The thread id from the main function is %ld\n", pthread_self());
   mainpid=getpid(); 
   rc=sched_getparam(mainpid, &main_param); 
   if(rc < 0) 
        printf("ERROR: sched_getparam");
   rc=sched_setscheduler(getpid(), SCHED_FIFO, &main_param);
   if(rc < 0) 
        printf("ERROR: sched_setscheduler");

   max_prio = sched_get_priority_max(SCHED_FIFO);
   min_prio = sched_get_priority_min(SCHED_FIFO);
   main_param.sched_priority=max_prio; 

   rc=sched_setparam(mainpid, &main_param); 
   if(rc < 0) 
        printf("ERROR: sched_setparam");         
   rc = pthread_setschedprio(pthread_self(), max_prio);
   if(rc < 0) 
        printf("ERROR: pthread_setschedprio");

   if (new_guard_size >= 0) 
        rc = pthread_attr_setguardsize(&t1_attr, new_guard_size);   /* Set the guard size for the thread */     
   if (rc != 0)
        printf("ERROR; pthread_attr_setguardsize() rc is %ld\n", rc); 


   rc = pthread_create(&tid_1, &t1_attr, dummy_fn, (void *)input_var);       /* creating a new thread*/
   if (rc) 
   {
        printf("ERROR; pthread_create() rc is %ld\n", rc); 
        perror(NULL); exit(-1);
   }
   printf("Thread 1 spawned\n");

   rc = pthread_create(&tid_2, &t2_attr, dummy2_fn, NULL);          /* creating a new thread*/
   if (rc) 
   {
        printf("ERROR; pthread_create() 2 rc is %ld\n", rc); 
        perror(NULL); exit(-1);
   }
   printf("Thread 2 spawned\n");
   
   printf("Control in main\n");
   
   if(pthread_join(tid_1, NULL) == 0)   /* Parent waits for the child thread1 to complete it's execution */
       printf("Thread 1 done\n");
   else
       perror("Thread 1");  
       
   if(pthread_join(tid_2, NULL) == 0)  /* Parent waits for the child thread2 to complete it's execution */
       printf("Thread 2 done\n");
   else
       perror("Thread 2"); 
      
   rc = pthread_mutex_destroy(&rsrcA);              /* Destroy the mutex */
   if(rc)
        printf("Mutex destroy error: %ld\n", rc);
   printf("Mutex destroyed\n");
   rc = pthread_cond_destroy(&condA);       /* Destory the condition variable */
   if (rc) 
   {
        printf("ERROR; pthread_cond_destroy() rc is %ld\n", rc); 
        perror(NULL); 
        exit(-1);
   }
   return 0;
   
}
/**
 * @file 
 *		find_kthreads.c
 * @brief 
 *		This file finds the number of children for each process and finds the init process by traversing
 *
 * @author 
 *		Saritha Senguttuvan
 * @date 
 *		Oct,2017
 *
 *  NOTE: I have referred the sched.h at path /home/saritha/Fall_2017/AES/linux-4.12.10/include/linux/sched.h
 *        list.h at path /home/saritha/Fall_2017/AES/linux-4.12.10/include/linux/list.h
 */

#include <linux/module.h>   
#include <linux/kernel.h>   
#include <linux/init.h> 
#include <linux/sched.h>   
#include <linux/sched/task.h> 

MODULE_LICENSE("GPL");
MODULE_DESCRIPTION("Find kernel threads module");
MODULE_AUTHOR("Saritha Senguttuvan");

static int find_process_init(void)                      /* function to initialize the kernel module */
{
    size_t children_number = 0;
    struct task_struct *my_current_task;
    struct list_head *traverse_task_list;
    long int current_state;
    printk(KERN_INFO "Loading find Kernel threads module \n");   
    for(my_current_task=current; my_current_task != &init_task; my_current_task = my_current_task->parent)
    {   
        printk("Current process id is %d\n", my_current_task->pid);               /* print the current processes pid */
        current_state = my_current_task->state;
        printk("Current process state is %ld\n", my_current_task->state);               /* print the current processes state */
        if(current_state == -1)
            printk("The state is UNRUNNABLE!\n");
        else if(current_state == 0)
            printk("The state is RUNNABLE!\n");   
        else
            printk("The state is STOPPED!\n"); 
        printk("Current thread name is %s\n",my_current_task->comm);           /* current thread's name */ 
        
        list_for_each(traverse_task_list, &my_current_task->children)
        {
            children_number++;
        }
        printk("Number of children for the current pid %d is %ld", my_current_task->pid, children_number); 
        children_number = 0;
    }
    printk("The init process has been reached\n");
    printk("Init process id is %d\n", my_current_task->pid);               /* print the current processes pid */
    current_state = my_current_task->state;
    printk("Init process state is %ld\n", my_current_task->state);               /* print the current processes state */
    if(current_state == -1)
       printk("The init process state is UNRUNNABLE!\n");
    else if(current_state == 0)
       printk("The init process state is RUNNABLE!\n");   
    else
       printk("The init process state is STOPPED!\n"); 
    printk("Init thread name is %s\n",my_current_task->comm);           /* current thread's name */     

    list_for_each(traverse_task_list, &my_current_task->children)       /*Function call to traverse through the children */ 
    {
        children_number++;                                          /* increment the number of children */
    }
    printk("Number of children for the init process pid %d is %ld\n", my_current_task->pid, children_number);  /* Prints the number of children for the init process */
    children_number = 0;
    return 0;
}

static void find_process_exit(void)             /* function to exit the kernel module */ 
{
    printk(KERN_INFO "unloading find Kernel threads module\n"); 
}
module_init(find_process_init);      /* find_process_init is registered as the entry point for the kernel module */   
module_exit(find_process_exit);      /* find_process_exit is registered as the exit point for the kernel module */ 

#define _GNU_SOURCE
#include <stdio.h>
#include <signal.h>
#include <pthread.h>
#include <stdlib.h>
#include <semaphore.h>

struct sigaction my_sig;

/* Semaphore names */
sem_t sem1;
sem_t sem2;

/* Mutex name */
pthread_mutex_t rsrcA;

FILE *file_ptr;     /* Pointer pointing to the file */

/* Thread names */
pthread_t tid_2;
pthread_t tid_3;

/* Structure to hold the word count, line count , characters */
typedef struct{
	size_t words;
	size_t lines;
	size_t characters;
}file_data;

file_data statistics;

/* Defining my owm handler to handle the system signals */
void my_handler(int signum)
{
    printf("AES\n");
    printf("Handler id is %ld\n",pthread_self());
    if (signum == SIGUSR1)                  /* If SIGUSR1 signal */
    {
        printf("Received SIGUSR1!\n");
        sem_post(&sem1);                    /* Post semaphore to thread2 */
    }
    if (signum == SIGUSR2)                  /* If SIGUSR2 signal */
    {
        printf("Received SIGUSR2!\n");      /* Post semaphore to thread3*/
        sem_post(&sem2);
    }
    if(signum == SIGTERM)                   /* If SIGTERM signal */
    {
        printf("Received SIGTERM!\n");
        if(file_ptr != NULL)
            fclose(file_ptr);               /* closing any files that was left opened */
       
        pthread_kill(tid_2, SIGTERM);       /* Kill the thread 2 with pthread kill */
        pthread_kill(tid_3, SIGTERM);       /* Kill the thread 3 with pthread kill */
        
        pthread_mutex_destroy(&rsrcA);      /* Destroy the mutex */ 
        sem_destroy(&sem1);                 /* Destroy sem1 */
        sem_destroy(&sem2);                 /* Destroy sem2 */
       
        printf("Exited Normally \n");
        exit(0);  
    }
}

/* start routine for thread2 */
void *thread2_fn(void *threadid)
{
    FILE *t2_fptr;
    char c;    
    printf("Thread2 waiting for semaphore 1\n");
    sem_wait(&sem1);                            /* Waiting for semaphore from signal handler */
    printf("Thread2 got semaphore 1\n");
    printf("Thread2 trying to get mutex lock\n");
    pthread_mutex_lock(&rsrcA);                 /* thread 2 acquiring the mutex lock */
    printf("Thread2 got mutex lock\n");    
    t2_fptr = fopen("multithread", "r");        /* Open a file and return the address */
    printf("Data processing\n");
    if (t2_fptr)
    {
	   while ((c=getc(t2_fptr)) != EOF) 
	   {
		    if (c!= ' ' && c!= '\n')            /* number of characters increased  excluding new line or space */
		    { 
		        statistics.characters++; 
		    }

		   if (c == ' ' || c == '\n') /* number of words increased if new line or space */
		   { 
		        statistics.words++; 
		   }  
		   if (c == '\n')             /* number of lines increased if new line character */
		   { 
		        statistics.lines++;  
		   }  
	   }
	   if(statistics.characters>0)
		  statistics.lines++;
		  statistics.words++; 
    }
    else
    {
         printf("Failed to open the file\n");
    }
    fclose(t2_fptr);            /* Close the file that was opened */
    printf("Thread2 releasing mutex lock\n");
    pthread_mutex_unlock(&rsrcA);   /* Release the mutex lock */
    pthread_exit(NULL);     
}

/* Start routine for thread 3 */
void *thread3_fn(void *threadid)
{
    printf("Thread3 waiting for semaphore 2\n");
    sem_wait(&sem2);            /* Waits for Sem post from signal handler */
    printf("Thread3 got semaphore 2\n");
    printf("Thread3 trying to get mutex lock\n");
    pthread_mutex_lock(&rsrcA);         /* acquiring the mutex lock */
    printf("Thread3 got mutex lock\n");
    printf("Lines : %ld \n", statistics.lines);
    printf("Words : %ld \n", statistics.words);
    printf("Characters : %ld \n", statistics.characters);
    printf("Thread3 releasing mutex lock\n");
    pthread_mutex_unlock(&rsrcA);       /* Releasing the mutex lock */
    pthread_exit(NULL);   
}

int main()
{
    int rc;
    size_t i = 0;
    char str[200];
    /* Thread atributes */
    pthread_attr_t t2_attr;
    pthread_attr_t t3_attr;
    
    /* Initialising the thread attributes */
    pthread_attr_init(&t2_attr); 
    pthread_attr_init(&t3_attr); 
    
    pthread_mutex_init(&rsrcA, NULL);  /* Initializes the mutex */
    sem_init(&sem1, 0, 0);  /* Initialize the semaphore */
    sem_init(&sem2, 0, 0);  /* Initialize the semaphore */  
    file_ptr = fopen("multithread", "a+"); /* Open the file with permissions */
    printf("Enter the text\n");

    scanf("%[^\t]%*c", str);
    fprintf(file_ptr, "%s", str);   
       
    fclose(file_ptr);       /* Close the file pointer */
    file_ptr = NULL;
    my_sig.sa_handler = my_handler; /* Assigning the signal handler function */
    sigaction(SIGUSR1, &my_sig, NULL);  /* Registering the signals */ 
    sigaction(SIGUSR2, &my_sig, NULL);   
    sigaction(SIGTERM, &my_sig, NULL);  
    rc = pthread_create(&tid_2, &t2_attr, thread2_fn, NULL);  /* Create thread2  */
    if (rc) 
    {
        printf("ERROR; pthread_create() 2 rc is %d\n", rc); 
        perror(NULL); 
        exit(-1);
    }
    printf("Thread 2 spawned\n");
    rc = pthread_create(&tid_3, &t3_attr, thread3_fn, NULL);  /* Create thread 3 */ 
    if (rc) 
    {
        printf("ERROR; pthread_create() 3 rc is %d\n", rc); 
        perror(NULL); 
        exit(-1);
    }
    printf("Thread 3 spawned\n");  
    
    if(pthread_join(tid_2, NULL) == 0)      /* Wait until child has completed execution*/
       printf("Thread 2 done\n");
    else
       perror("Thread 2");  
       
    if(pthread_join(tid_3, NULL) == 0)    /* Wait until child has completed execution*/
       printf("Thread 3 done\n");
    else
       perror("Thread 3");  
       
   rc = pthread_mutex_destroy(&rsrcA);      /* Destroy the mutex */
   if(rc)
        printf("Mutex destroy error: %d\n", rc);
   printf("Mutex destroyed\n");
   
   rc = sem_destroy(&sem1);             /* Destroy the Semaphore1 */
   if(rc)
        printf("Semaphore 1 destroy error: %d\n", rc);
   printf("Semaphore 1 destroyed\n");
   rc = sem_destroy(&sem2);             /* Destroy the Semaphore2 */
   if(rc)
        printf("Semaphore 2 destroy error: %d\n", rc);
   printf("Semaphore 2 destroyed\n");    
    return(0);

}
